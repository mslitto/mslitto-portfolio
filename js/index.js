var D = document,
    M = Math,
    W = window,
    $ = function (a, b) {
  return b = b || D, a.startsWith('.') ? b.getElementsByClassName(a.substr(1, a.length)) : a.startsWith('#') ? b.getElementById(a.substr(1, a.length)) : b.getElementsByTagName(a);
},
    dragged = !1,
    startPos = !1,
    currentZ = 1,
    forEach = function (a, b) {
  for (var c = 0; c < a.length; c++) a.hasOwnProperty(c) && b(a[c]);
},
    cl = {
  has: function has(a, b) {
    return a.className && -1 < a.className.indexOf(b);
  },
  add: function add(a, b) {
    cl.has(a, b) || (a.className && (b = a.className + ' ' + b), a.className = b);
  },
  rm: function rm(a, b) {
    cl.has(a, b) && (a.className = a.className.replace(b, '').trim());
  },
  toggle: function toggle(a, b) {
    cl.has(a, b) ? cl.rm(a, b) : cl.add(a, b);
  }
},
    on = function (a, b, c) {
  a && a.addEventListener(b, c);
},
    getPos = function (a) {
  return parseInt(a.replace('%', ''));
},
    percentFromPixels = function (a, b) {
  return 100 * (b / W["inner".concat(a)]);
},
    pixelsFromPercent = function (a, b) {
  return b * W["inner".concat(a)] / 100;
},
    onLoad = function (a, b) {
  if (cl.has(b, 'bg')) {
    var c = b.getBoundingClientRect().width,
        d = b.getBoundingClientRect().height,
        e = 0,
        f = 0,
        g = .7 * W.innerWidth;

    if (c > g) {
      var j = c / g + .1;
      c /= j, d /= j;
    } // resize if too high


    var k = .7 * W.innerHeight;

    if (d > k) {
      var l = d / k + .1;
      d /= l, c /= l;
    }

    var h = W.innerWidth - c,
        i = W.innerHeight - d;
    e = M.random() * h, f = M.random() * i, e = "".concat(M.floor(percentFromPixels('Width', e)), "%"), f = "".concat(M.floor(percentFromPixels('Height', f)), "%"), a.style.left = e, a.style.top = f;
  }
},
    drag = $('.drag', $('#draggables'));

forEach(drag, function (a) {
  var b = M.random(),
      c = {
    left: '100%',
    top: '100%'
  };
  .7 < b ? c.left = "-".concat(c.left) : .3 > b && (c.top = "-".concat(c.top)), a.style.left = c.left, a.style.top = c.top;
  var d = $('.bg', a)[0],
      e = $('img', d)[0];
  e.complete ? onLoad(a, e.parentNode) : on(e, 'load', function () {
    onLoad(a, e.parentNode);
  });
});

var touchHandler = function (a) {
  var b = a.changedTouches[0],
      c = D.createEvent("MouseEvent"),
      d = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup"
  }[a.type];
  return c.initMouseEvent(d, !0, !0, W, 1, b.screenX, b.screenY, b.clientX, b.clientY, !1, !1, !1, !1, 0, null), b.target.dispatchEvent(c), a.preventDefault(), a.stopPropagation(), !1;
},
    doNothing = function (a) {
  return a.preventDefault(), !1;
},
    isOutOfBounds = function (a) {
  return a.clientX >= W.innerWidth || 0 >= a.clientX || a.clientY >= W.innerHeight || 0 >= a.clientY;
},
    onDrag = function (a) {
  dragged = a.currentTarget.parentNode, cl.add(dragged, 'dragged'), startPos = {
    left: pixelsFromPercent('Width', getPos(dragged.style.left)),
    top: pixelsFromPercent('Height', getPos(dragged.style.top))
  }, currentZ += 1, dragged.style.zIndex = currentZ, dragged.offset = {
    left: a.clientX - pixelsFromPercent('Width', getPos(dragged.style.left)),
    top: a.clientY - pixelsFromPercent('Height', getPos(dragged.style.top))
  }, dragged.style.opacity = .8, on(D, 'mousemove', onMousemove), on(D, 'mouseup', onDrop), on(D, 'mouseout', onDropIfOutOfBounds);
},
    onDrop = function () {
  dragged && (forEach(drag, function (a) {
    cl.rm(a, 'dragged'), a === dragged ? cl.add(dragged, 'dropped') : cl.rm(a, 'dropped');
  }), dragged.style.opacity = 1, dragged = !1, startPos = !1);
},
    onDropIfOutOfBounds = function (a) {
  isOutOfBounds(a) && onDrop(a);
},
    onMousemove = function (a) {
  if (dragged) {
    var b = {
      left: W.innerWidth - dragged.clientWidth,
      top: W.innerHeight - dragged.clientHeight
    },
        c = M.floor(M.max(0, M.min(a.clientX - dragged.offset.left, b.left)));
    dragged.style.left = "".concat(percentFromPixels('Width', c), "%");
    var d = a.clientY - dragged.offset.top;
    0 > d ? d = 0 : d > b.top && (d = b.top), dragged.style.top = "".concat(percentFromPixels('Height', d), "%");
  }
};

W.onload = function () {
  forEach(drag, function (b) {
    var c = $('.bg', b)[0];

    if (c) {
      on(c, 'dragstart', doNothing), on(c, 'mousedown', onDrag), on(c, "touchstart", touchHandler, !0), on(c, "touchmove", touchHandler, !0), on(c, "touchend", touchHandler, !0), on(c, "touchcancel", touchHandler, !0);
      var a = c.parentNode.style;
      (a && '100%' === a.left || '-100%' === a.left) && c.dispatchEvent(new Event('load'));
    }

    var d = $('a', b)[0];
    d && on(d, 'touchend', function (a) {
      return a.stopPropagation(), !1;
    });
  });
};

// Menu Toggler
var menuContainer = $('.nav')[0];

if (menuContainer) {
  // find active menu
  var active = $('.active', menuContainer)[0]; // add click event handler to toggle the menu

  on(active, 'click', function (a) {
    return a.preventDefault(), cl.toggle(menuContainer, 'show'), !1;
  });
} // About page Toggler


var t = $('.about-page-trigger')[0]; // if #about is in the url, show the about page

'#about' === W.location.hash && cl.toggle(D.body, "about-visible"), on(t, "click", function (a) {
  return a.preventDefault(), W.location.hash = '#about' === W.location.hash ? '' : '#about', cl.toggle(D.body, "about-visible"), !1;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkQiLCJkb2N1bWVudCIsIk0iLCJNYXRoIiwiVyIsIndpbmRvdyIsIiQiLCJzdHIiLCJwYXIiLCJzdGFydHNXaXRoIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInN1YnN0ciIsImxlbmd0aCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJkcmFnZ2VkIiwic3RhcnRQb3MiLCJjdXJyZW50WiIsImZvckVhY2giLCJpdGVtcyIsImZuIiwiaSIsImhhc093blByb3BlcnR5IiwiY2wiLCJoYXMiLCJlIiwiYyIsImNsYXNzTmFtZSIsImluZGV4T2YiLCJhZGQiLCJybSIsInJlcGxhY2UiLCJ0cmltIiwidG9nZ2xlIiwib24iLCJlbGUiLCJsaXN0ZW5lciIsImNiIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldFBvcyIsInBhcnNlSW50IiwicGVyY2VudEZyb21QaXhlbHMiLCJkaXIiLCJweCIsInBpeGVsc0Zyb21QZXJjZW50IiwicGMiLCJvbkxvYWQiLCJ0YXIiLCJ3aWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhlaWdodCIsImxlZnQiLCJ0b3AiLCJtYXhXaWR0aCIsImlubmVyV2lkdGgiLCJ3aWR0aFBlcmNlbnQiLCJtYXhIZWlnaHQiLCJpbm5lckhlaWdodCIsImhlaWdodFBlcmNlbnQiLCJtYXhMZWZ0IiwibWF4VG9wIiwicmFuZG9tIiwiZmxvb3IiLCJzdHlsZSIsImRyYWciLCJkcmFnZ2FibGUiLCJyYW4iLCJwb3MiLCJpbWciLCJpbWdTcmMiLCJjb21wbGV0ZSIsInBhcmVudE5vZGUiLCJ0b3VjaEhhbmRsZXIiLCJldmVudCIsInRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJzaW11bGF0ZWRFdmVudCIsImNyZWF0ZUV2ZW50IiwiZXZ0IiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwidHlwZSIsImluaXRNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInRhcmdldCIsImRpc3BhdGNoRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImRvTm90aGluZyIsImlzT3V0T2ZCb3VuZHMiLCJvbkRyYWciLCJjdXJyZW50VGFyZ2V0IiwiekluZGV4Iiwib2Zmc2V0Iiwib3BhY2l0eSIsIm9uTW91c2Vtb3ZlIiwib25Ecm9wIiwib25Ecm9wSWZPdXRPZkJvdW5kcyIsIm1heCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwibmV3TGVmdCIsIm1pbiIsIm5ld1RvcCIsIm9ubG9hZCIsInBhcmVudFN0eWxlIiwiRXZlbnQiLCJhIiwibWVudUNvbnRhaW5lciIsImFjdGl2ZSIsInQiLCJsb2NhdGlvbiIsImhhc2giLCJib2R5Il0sIm1hcHBpbmdzIjoiSUFBTUEsQ0FBQyxHQUFHQyxRO0lBQ0pDLENBQUMsR0FBR0MsSTtJQUNKQyxDQUFDLEdBQUdDLE07SUFFSkMsQ0FBQyxHQUFHLFVBQUNDLENBQUQsRUFBTUMsQ0FBTixFQUFjO0FBQUEsU0FDdEJBLENBQUcsR0FBR0EsQ0FBRyxJQUFJUixDQURTLEVBR2xCTyxDQUFHLENBQUNFLFVBQUosQ0FBZSxHQUFmLENBSGtCLEdBSWJELENBQUcsQ0FBQ0Usc0JBQUosQ0FBMkJILENBQUcsQ0FBQ0ksTUFBSixDQUFXLENBQVgsRUFBY0osQ0FBRyxDQUFDSyxNQUFsQixDQUEzQixDQUphLEdBS1hMLENBQUcsQ0FBQ0UsVUFBSixDQUFlLEdBQWYsQ0FMVyxHQU1iRCxDQUFHLENBQUNLLGNBQUosQ0FBbUJOLENBQUcsQ0FBQ0ksTUFBSixDQUFXLENBQVgsRUFBY0osQ0FBRyxDQUFDSyxNQUFsQixDQUFuQixDQU5hLEdBUWJKLENBQUcsQ0FBQ00sb0JBQUosQ0FBeUJQLENBQXpCLENBUmE7QUFVdkIsQztJQUdHUSxPQUFPLEs7SUFDUEMsUUFBUSxLO0lBQ1JDLFFBQVEsR0FBRyxDO0lBR1RDLE9BQU8sR0FBRyxVQUFDQyxDQUFELEVBQVFDLENBQVIsRUFBZTtB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RUFBSSxPQUFKLEVBQWEsVUFBQXpGLENBQUMsRUFBSTtBQVFsQixTQVBBQSxDQUFDLENBQUNpRSxjQUFGLEVBT0EsRUFMRXRGLENBQUMsQ0FBQytHLFFBQUYsQ0FBV0MsSUFLYixHQU53QixRQUFwQixLQUFBaEgsQ0FBQyxDQUFDK0csUUFBRixDQUFXQyxJQU1mLEdBTG9CLEVBS3BCLEdBSG9CLFFBR3BCLEVBREE3RixFQUFFLENBQUNVLE1BQUgsQ0FBVWpDLENBQUMsQ0FBQ3FILElBQVosRUFBa0IsZUFBbEIsQ0FDQTtBQUNELENBVEMsQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEQgPSBkb2N1bWVudFxuY29uc3QgTSA9IE1hdGhcbmNvbnN0IFcgPSB3aW5kb3dcblxuY29uc3QgJCA9IChzdHIsIHBhcikgPT4ge1xuICBwYXIgPSBwYXIgfHwgRFxuXG4gIGlmIChzdHIuc3RhcnRzV2l0aCgnLicpKSB7XG4gICAgcmV0dXJuIHBhci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHN0ci5zdWJzdHIoMSwgc3RyLmxlbmd0aCkpXG4gIH0gZWxzZSBpZiAoc3RyLnN0YXJ0c1dpdGgoJyMnKSkge1xuICAgIHJldHVybiBwYXIuZ2V0RWxlbWVudEJ5SWQoc3RyLnN1YnN0cigxLCBzdHIubGVuZ3RoKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyLmdldEVsZW1lbnRzQnlUYWdOYW1lKHN0cilcbiAgfVxufVxuXG4vLyBnbG9iYWwgYXBwIHN0YXRlXG5sZXQgZHJhZ2dlZCA9IGZhbHNlXG5sZXQgc3RhcnRQb3MgPSBmYWxzZVxubGV0IGN1cnJlbnRaID0gMVxuXG4vLyBsb29wIG92ZXIgZWFjaCBpdGVtIGFuZCBjYWxsIGZuKGl0ZW0pXG5jb25zdCBmb3JFYWNoID0gKGl0ZW1zLCBmbikgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBmbihpdGVtc1tpXSlcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgY2wgPSB7XG4gIGhhcyhlLCBjKSB7XG4gICAgcmV0dXJuIGUuY2xhc3NOYW1lICYmIGUuY2xhc3NOYW1lLmluZGV4T2YoYykgPiAtMVxuICB9LFxuICBhZGQoZSwgYykge1xuICAgIGlmICghY2wuaGFzKGUsIGMpKSB7XG4gICAgICBpZiAoZS5jbGFzc05hbWUpIHtcbiAgICAgICAgYyA9IGUuY2xhc3NOYW1lICsgJyAnICsgY1xuICAgICAgfVxuICAgICAgZS5jbGFzc05hbWUgPSBjXG4gICAgfVxuICB9LFxuICBybShlLCBjKSB7XG4gICAgaWYgKGNsLmhhcyhlLCBjKSkge1xuICAgICAgZS5jbGFzc05hbWUgPSBlLmNsYXNzTmFtZS5yZXBsYWNlKGMsICcnKS50cmltKClcbiAgICB9XG4gIH0sXG4gIHRvZ2dsZShlLCBjKSB7XG4gICAgaWYgKGNsLmhhcyhlLCBjKSkge1xuICAgICAgY2wucm0oZSwgYylcbiAgICB9IGVsc2Uge1xuICAgICAgY2wuYWRkKGUsIGMpXG4gICAgfVxuICB9LFxufVxuXG5jb25zdCBvbiA9IChlbGUsIGxpc3RlbmVyLCBjYikgPT4ge1xuICBpZiAoZWxlKSB7XG4gICAgZWxlLmFkZEV2ZW50TGlzdGVuZXIobGlzdGVuZXIsIGNiKVxuICB9XG59XG5cbmNvbnN0IGdldFBvcyA9IGUgPT4gcGFyc2VJbnQoZS5yZXBsYWNlKCclJywgJycpKVxuXG5jb25zdCBwZXJjZW50RnJvbVBpeGVscyA9IChkaXIsIHB4KSA9PiAocHggLyBXW2Bpbm5lciR7ZGlyfWBdKSAqIDEwMFxuY29uc3QgcGl4ZWxzRnJvbVBlcmNlbnQgPSAoZGlyLCBwYykgPT4gKHBjICogV1tgaW5uZXIke2Rpcn1gXSkgLyAxMDBcblxuLy8gcmVzaXplIGFuZCByZXBvc2l0aW9uIGFmdGVyIGxvYWQgb2YgaW1hZ2VzXG5jb25zdCBvbkxvYWQgPSAocGFyLCB0YXIpID0+IHtcbiAgaWYgKGNsLmhhcyh0YXIsICdiZycpKSB7XG4gICAgbGV0IHdpZHRoID0gdGFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gICAgbGV0IGhlaWdodCA9IHRhci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICBsZXQgbGVmdCA9IDBcbiAgICBsZXQgdG9wID0gMFxuXG4gICAgLy8gcmVzaXplIGlmIHRvbyB3aWRlXG4gICAgY29uc3QgbWF4V2lkdGggPSBXLmlubmVyV2lkdGggKiAuN1xuICAgIGlmICh3aWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICBjb25zdCB3aWR0aFBlcmNlbnQgPSAod2lkdGggLyBtYXhXaWR0aCkgKyAuMVxuICAgICAgd2lkdGggLz0gd2lkdGhQZXJjZW50XG4gICAgICBoZWlnaHQgLz0gd2lkdGhQZXJjZW50XG4gICAgfVxuXG4gICAgLy8gcmVzaXplIGlmIHRvbyBoaWdoXG4gICAgY29uc3QgbWF4SGVpZ2h0ID0gVy5pbm5lckhlaWdodCAqIC43XG4gICAgaWYgKGhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgY29uc3QgaGVpZ2h0UGVyY2VudCA9IChoZWlnaHQgLyBtYXhIZWlnaHQpICsgLjFcbiAgICAgIGhlaWdodCAvPSBoZWlnaHRQZXJjZW50XG4gICAgICB3aWR0aCAvPSBoZWlnaHRQZXJjZW50XG4gICAgfVxuXG4gICAgY29uc3QgbWF4TGVmdCA9IFcuaW5uZXJXaWR0aCAtIHdpZHRoXG4gICAgY29uc3QgbWF4VG9wID0gVy5pbm5lckhlaWdodCAtIGhlaWdodFxuICAgIGxlZnQgPSBNLnJhbmRvbSgpICogbWF4TGVmdFxuICAgIHRvcCA9IE0ucmFuZG9tKCkgKiBtYXhUb3BcbiAgICBsZWZ0ID0gYCR7TS5mbG9vcihwZXJjZW50RnJvbVBpeGVscygnV2lkdGgnLCBsZWZ0KSl9JWBcbiAgICB0b3AgPSBgJHtNLmZsb29yKHBlcmNlbnRGcm9tUGl4ZWxzKCdIZWlnaHQnLCB0b3ApKX0lYFxuXG4gICAgcGFyLnN0eWxlLmxlZnQgPSBsZWZ0XG4gICAgcGFyLnN0eWxlLnRvcCA9IHRvcFxuICB9XG59XG5cbi8vIGdsb2JhbCBkcmFnIGRvbSBlbGVtZW50cywgY2hpbGRyZW4gb2YgI2RyYWdnYWJsZXNcbmNvbnN0IGRyYWcgPSAkKCcuZHJhZycsICQoJyNkcmFnZ2FibGVzJykpXG5cbmZvckVhY2goZHJhZywgZHJhZ2dhYmxlID0+IHtcbiAgY29uc3QgcmFuID0gTS5yYW5kb20oKVxuICBjb25zdCBwb3MgPSB7XG4gICAgbGVmdDogJzEwMCUnLFxuICAgIHRvcDogJzEwMCUnLFxuICB9XG5cbiAgaWYgKHJhbiA+IDAuNykge1xuICAgIHBvcy5sZWZ0ID0gYC0ke3Bvcy5sZWZ0fWBcbiAgfSBlbHNlIGlmIChyYW4gPCAwLjMpIHtcbiAgICBwb3MudG9wID0gYC0ke3Bvcy50b3B9YFxuICB9XG5cbiAgZHJhZ2dhYmxlLnN0eWxlLmxlZnQgPSBwb3MubGVmdFxuICBkcmFnZ2FibGUuc3R5bGUudG9wID0gcG9zLnRvcFxuXG4gIGNvbnN0IGltZyA9ICQoJy5iZycsIGRyYWdnYWJsZSlbMF1cbiAgY29uc3QgaW1nU3JjID0gJCgnaW1nJywgaW1nKVswXVxuXG4gIGlmICghaW1nU3JjLmNvbXBsZXRlKSB7XG4gICAgb24oaW1nU3JjLCAnbG9hZCcsICgpID0+IHtcbiAgICAgIG9uTG9hZChkcmFnZ2FibGUsIGltZ1NyYy5wYXJlbnROb2RlKVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgb25Mb2FkKGRyYWdnYWJsZSwgaW1nU3JjLnBhcmVudE5vZGUpXG4gIH1cbn0pXG5cbmNvbnN0IHRvdWNoSGFuZGxlciA9IChldmVudCkgPT4ge1xuICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdXG4gIGNvbnN0IHNpbXVsYXRlZEV2ZW50ID0gRC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRcIilcblxuICBjb25zdCBldmVudE5hbWVzID0ge1xuICAgIHRvdWNoc3RhcnQ6IFwibW91c2Vkb3duXCIsXG4gICAgdG91Y2htb3ZlOiBcIm1vdXNlbW92ZVwiLFxuICAgIHRvdWNoZW5kOiBcIm1vdXNldXBcIixcbiAgfVxuXG4gIGNvbnN0IGV2dCA9IGV2ZW50TmFtZXNbZXZlbnQudHlwZV1cblxuICBzaW11bGF0ZWRFdmVudC5pbml0TW91c2VFdmVudChcbiAgICBldnQsIHRydWUsIHRydWUsIFcsIDEsXG4gICAgdG91Y2guc2NyZWVuWCwgdG91Y2guc2NyZWVuWSxcbiAgICB0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZLFxuICAgIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsXG4gIClcblxuICB0b3VjaC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudClcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICByZXR1cm4gZmFsc2Vcbn1cblxuY29uc3QgZG9Ob3RoaW5nID0gKGUpID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIHJldHVybiBmYWxzZVxufVxuXG5jb25zdCBpc091dE9mQm91bmRzID0gZSA9PiAoXG4gIGUuY2xpZW50WCA+PSBXLmlubmVyV2lkdGggfHxcbiAgZS5jbGllbnRYIDw9IDAgfHxcbiAgZS5jbGllbnRZID49IFcuaW5uZXJIZWlnaHQgfHxcbiAgZS5jbGllbnRZIDw9IDBcbilcblxuY29uc3Qgb25EcmFnID0gZXZ0ID0+IHtcbiAgZHJhZ2dlZCA9IGV2dC5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGVcblxuICBjbC5hZGQoZHJhZ2dlZCwgJ2RyYWdnZWQnKVxuXG4gIHN0YXJ0UG9zID0ge1xuICAgIGxlZnQ6IHBpeGVsc0Zyb21QZXJjZW50KCdXaWR0aCcsIGdldFBvcyhkcmFnZ2VkLnN0eWxlLmxlZnQpKSxcbiAgICB0b3A6IHBpeGVsc0Zyb21QZXJjZW50KCdIZWlnaHQnLCBnZXRQb3MoZHJhZ2dlZC5zdHlsZS50b3ApKSxcbiAgfVxuXG4gIGN1cnJlbnRaICs9IDFcbiAgZHJhZ2dlZC5zdHlsZS56SW5kZXggPSBjdXJyZW50WlxuICBkcmFnZ2VkLm9mZnNldCA9IHtcbiAgICBsZWZ0OiBldnQuY2xpZW50WCAtIHBpeGVsc0Zyb21QZXJjZW50KCdXaWR0aCcsIGdldFBvcyhkcmFnZ2VkLnN0eWxlLmxlZnQpKSxcbiAgICB0b3A6IGV2dC5jbGllbnRZIC0gcGl4ZWxzRnJvbVBlcmNlbnQoJ0hlaWdodCcsIGdldFBvcyhkcmFnZ2VkLnN0eWxlLnRvcCkpLFxuICB9XG4gIGRyYWdnZWQuc3R5bGUub3BhY2l0eSA9IDAuOFxuXG4gIG9uKEQsICdtb3VzZW1vdmUnLCBvbk1vdXNlbW92ZSlcbiAgb24oRCwgJ21vdXNldXAnLCBvbkRyb3ApXG4gIG9uKEQsICdtb3VzZW91dCcsIG9uRHJvcElmT3V0T2ZCb3VuZHMpXG59XG5cbmNvbnN0IG9uRHJvcCA9ICgpID0+IHtcbiAgaWYgKCFkcmFnZ2VkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBmb3JFYWNoKGRyYWcsIGRyYWdnYWJsZSA9PiB7XG4gICAgY2wucm0oZHJhZ2dhYmxlLCAnZHJhZ2dlZCcpXG5cbiAgICBpZiAoZHJhZ2dhYmxlID09PSBkcmFnZ2VkKSB7XG4gICAgICBjbC5hZGQoZHJhZ2dlZCwgJ2Ryb3BwZWQnKVxuICAgIH0gZWxzZSB7XG4gICAgICBjbC5ybShkcmFnZ2FibGUsICdkcm9wcGVkJylcbiAgICB9XG4gIH0pXG5cbiAgZHJhZ2dlZC5zdHlsZS5vcGFjaXR5ID0gMVxuXG4gIGRyYWdnZWQgPSBmYWxzZVxuICBzdGFydFBvcyA9IGZhbHNlXG59XG5cbmNvbnN0IG9uRHJvcElmT3V0T2ZCb3VuZHMgPSBlID0+IHtcbiAgaWYgKGlzT3V0T2ZCb3VuZHMoZSkpIHtcbiAgICBvbkRyb3AoZSlcbiAgfVxufVxuXG5jb25zdCBvbk1vdXNlbW92ZSA9IGV2dCA9PiB7XG4gIGlmIChkcmFnZ2VkKSB7XG4gICAgY29uc3QgbWF4ID0ge1xuICAgICAgbGVmdDogVy5pbm5lcldpZHRoIC0gZHJhZ2dlZC5jbGllbnRXaWR0aCxcbiAgICAgIHRvcDogVy5pbm5lckhlaWdodCAtIGRyYWdnZWQuY2xpZW50SGVpZ2h0LFxuICAgIH1cblxuICAgIGNvbnN0IG5ld0xlZnQgPSBNLmZsb29yKE0ubWF4KDAsIE0ubWluKGV2dC5jbGllbnRYIC0gZHJhZ2dlZC5vZmZzZXQubGVmdCwgbWF4LmxlZnQpKSlcblxuICAgIGRyYWdnZWQuc3R5bGUubGVmdCA9IGAke3BlcmNlbnRGcm9tUGl4ZWxzKCdXaWR0aCcsIG5ld0xlZnQpfSVgXG5cbiAgICBsZXQgbmV3VG9wID0gZXZ0LmNsaWVudFkgLSBkcmFnZ2VkLm9mZnNldC50b3BcbiAgICBpZiAobmV3VG9wIDwgMCkge1xuICAgICAgbmV3VG9wID0gMFxuICAgIH0gZWxzZSBpZiAobmV3VG9wID4gbWF4LnRvcCkge1xuICAgICAgbmV3VG9wID0gbWF4LnRvcFxuICAgIH1cbiAgICBkcmFnZ2VkLnN0eWxlLnRvcCA9IGAke3BlcmNlbnRGcm9tUGl4ZWxzKCdIZWlnaHQnLCBuZXdUb3ApfSVgXG4gIH1cbn1cblxuLy8gSW5pdGlhdGUgdGhpcyBhcHAgb24gd2luZG93IGxvYWRcblcub25sb2FkID0gKCkgPT4ge1xuICBmb3JFYWNoKGRyYWcsIGRyYWdnYWJsZSA9PiB7XG4gICAgY29uc3QgaW1nID0gJCgnLmJnJywgZHJhZ2dhYmxlKVswXVxuICAgIGlmIChpbWcpIHtcbiAgICAgIG9uKGltZywgJ2RyYWdzdGFydCcsIGRvTm90aGluZylcbiAgICAgIG9uKGltZywgJ21vdXNlZG93bicsIG9uRHJhZylcblxuICAgICAgb24oaW1nLCBcInRvdWNoc3RhcnRcIiwgdG91Y2hIYW5kbGVyLCB0cnVlKVxuICAgICAgb24oaW1nLCBcInRvdWNobW92ZVwiLCB0b3VjaEhhbmRsZXIsIHRydWUpXG4gICAgICBvbihpbWcsIFwidG91Y2hlbmRcIiwgdG91Y2hIYW5kbGVyLCB0cnVlKVxuICAgICAgb24oaW1nLCBcInRvdWNoY2FuY2VsXCIsIHRvdWNoSGFuZGxlciwgdHJ1ZSlcblxuICAgICAgY29uc3QgcGFyZW50U3R5bGUgPSBpbWcucGFyZW50Tm9kZS5zdHlsZVxuICAgICAgaWYgKHBhcmVudFN0eWxlICYmIHBhcmVudFN0eWxlLmxlZnQgPT09ICcxMDAlJyB8fCBwYXJlbnRTdHlsZS5sZWZ0ID09PSAnLTEwMCUnKSB7XG4gICAgICAgIGltZy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnbG9hZCcpKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGEgPSAkKCdhJywgZHJhZ2dhYmxlKVswXVxuICAgIGlmIChhKSB7XG4gICAgICBvbihhLCAndG91Y2hlbmQnLCBlID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0pXG4gICAgfVxuICB9KVxufVxuXG5cbi8vIE1lbnUgVG9nZ2xlclxuY29uc3QgbWVudUNvbnRhaW5lciA9ICQoJy5uYXYnKVswXVxuaWYgKG1lbnVDb250YWluZXIpIHtcbiAgLy8gZmluZCBhY3RpdmUgbWVudVxuICBjb25zdCBhY3RpdmUgPSAkKCcuYWN0aXZlJywgbWVudUNvbnRhaW5lcilbMF1cblxuICAvLyBhZGQgY2xpY2sgZXZlbnQgaGFuZGxlciB0byB0b2dnbGUgdGhlIG1lbnVcbiAgb24oYWN0aXZlLCAnY2xpY2snLCBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjbC50b2dnbGUobWVudUNvbnRhaW5lciwgJ3Nob3cnKVxuICAgIHJldHVybiBmYWxzZVxuICB9KVxufVxuXG4vLyBBYm91dCBwYWdlIFRvZ2dsZXJcbmNvbnN0IHQgPSAkKCcuYWJvdXQtcGFnZS10cmlnZ2VyJylbMF1cblxuLy8gaWYgI2Fib3V0IGlzIGluIHRoZSB1cmwsIHNob3cgdGhlIGFib3V0IHBhZ2VcbmlmIChXLmxvY2F0aW9uLmhhc2ggPT09ICcjYWJvdXQnKSB7XG4gIGNsLnRvZ2dsZShELmJvZHksIFwiYWJvdXQtdmlzaWJsZVwiKVxufVxuXG5vbih0LCBcImNsaWNrXCIsIGUgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KClcbiAgaWYgKFcubG9jYXRpb24uaGFzaCA9PT0gJyNhYm91dCcpIHtcbiAgICBXLmxvY2F0aW9uLmhhc2ggPSAnJ1xuICB9IGVsc2Uge1xuICAgIFcubG9jYXRpb24uaGFzaCA9ICcjYWJvdXQnXG4gIH1cbiAgY2wudG9nZ2xlKEQuYm9keSwgXCJhYm91dC12aXNpYmxlXCIpXG4gIHJldHVybiBmYWxzZVxufSlcbiJdfQ==